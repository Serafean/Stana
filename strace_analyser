#!/usr/bin/env python
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


import sys
import getopt
import re
import traceback
import logging
import os
from optparse import OptionParser, OptionValueError
from straceParserLib.StraceParser import StraceParser

def importPlugin(pluginname, name):
    """ Import a plugin 
        similar to "from pluginname import name"
    """
    try:
        plugin = __import__(pluginname, globals(), locals(), [name])
    except ImportError:
        return None
    return getattr(plugin, name)

def main():
    # parse command line options
    optionParser = OptionParser(usage="usage: %prog [options] [plugins] <filename>")
    optionParser.add_option("-t", action="count", dest="withtime", help="have time in strace (disable autodetect, use -T, -f, -t, -tt or -ttt to match with your strace output)")
    optionParser.add_option("-f", action="store_true", dest="withpid", help="have pid in strace (disable autodetect)")
    optionParser.add_option("-T", action="store_true", dest="withtimespent", help="have time spent in strace (disable autodetect)")
    optionParser.add_option("-l", "--list-plugins", action="store_true", dest="listplugins", help="list all plugins")
    optionParser.add_option("-e", "--enable-plugins", action="store", type="string", dest="enableplugins", help="enable these plugins only (e.g. plugin1,plugin2,plugin3)")

    (options, args) = optionParser.parse_args()

    # List plugins
    if options.listplugins:
        print "=== Stat plugin list ==="
        pluginPath = os.path.join(sys.path[0], "statPlugins")
        plugins = os.listdir(pluginPath)
        plugins.sort()

        for plug in plugins:
            plugbase = plug[:-3]
            if not plug[-3:] == '.py' or plugbase == "__init__" or plugbase == "StatBase":
                continue
            
            try:
                pluginClass = importPlugin("statPlugins." + plugbase, plugbase)
            except:
                print "Warning: plugin %s does not install, skipping" % plug
            print plugbase, ":", pluginClass.__doc__

        # just listed all plugin and then exit
        exit(0)

    # Not list plugin then we will need the strace file
    if len(args) < 1:
        print "Error: Filename is missing, exit."
        optionParser.print_help()
        return 1
    straceFile = args[0]

    # init StraceParser
    straceParser = StraceParser()
    straceOptions = {}
    if options.withpid or options.withtime or options.withtimespent:
        straceOptions["havePid"] = options.withpid
        # options.withtime contain the number of -t (e.g. -t = 1, -tt = 2. -ttt = 3)
        # convert it back to t, tt, or ttt
        straceOptions["haveTime"] = "t" * options.withtime  
        straceOptions["haveTimeSpent"] = options.withtimespent
    else:
        straceOptions = straceParser.autoDetectFormat(straceFile)
        if not straceOptions:
            logging.warning("Auto detect line format failed. Suggest using -t,-f,-T to specify.")
            exit(1)

    # Load enabled plugins
    enablePluginList = []
    if options.enableplugins:
        enablePluginList = options.enableplugins.split(",")

    statObjList = []
    if len(enablePluginList) == 0:
        print "No plugin is specified. Exit."
        exit(0)
    else:
        for plug in enablePluginList:
            pluginClass = importPlugin("statPlugins." + plug, plug)
            if not pluginClass:
                print "Cannot install plugin %s, skipping" % plug
                continue

            statObj = pluginClass()
            if statObj.isOperational(straceOptions): # if it is operational under current strace option
                statObjList.append(statObj)   # new an object from plugin class and put into list
            else:
                print "plugin %s is not operational under this strace options, skipping" % plug

    if len(statObjList) == 0:
        print "No plugin is loaded. Exit."
        exit(1)

    # register plugins to parser
    for obj in statObjList:
        hooks = obj.getSyscallHooks()
        if hooks:
            for syscall, func in hooks.iteritems():
                straceParser.registerSyscallHook(syscall, func)
        hooks = obj.getRawSyscallHooks()
        if hooks:
            for syscall, func in hooks.iteritems():
                straceParser.registerRawSyscallHook(syscall, func)
    
    ## Go ahead and parse the file
    straceParser.startParse(straceFile, straceOptions)

    ## print the result of the stat plugins
    for obj in statObjList:
        obj.printOutput()

if __name__ == "__main__":
    main()
