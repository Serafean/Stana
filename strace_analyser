#!/usr/bin/env python
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


import sys
import getopt
import re
import traceback
import logging
import os
from optparse import OptionParser
from straceParserLib.StraceParser import StraceParser

def importPlugin(pluginname, name):
    """ Import a plugin 
        similar to "from pluginname import name"
    """
    try:
        plugin = __import__(pluginname, globals(), locals(), [name])
    except ImportError:
        return None
    return getattr(plugin, name)


def main():
    # parse command line options
    optionParser = OptionParser(usage="usage: %prog [options] [plugins] <filename>")
    optionParser.add_option("-t", "--withtime", action="store_true", dest="withtime", help="have time in strace (disable autodetect)")
    optionParser.add_option("-f", "--withfork", action="store_true", dest="withpid", help="have pid in strace (disable autodetect)")
    optionParser.add_option("-T", "--withtimespent", action="store_true", dest="withtimespent", help="have time spent in strace (disable autodetect)")
    optionParser.add_option("-l", "--list-plugins", action="store_true", dest="listplugins", help="list all plugins")
    optionParser.add_option("-e", "--enable-plugins", action="store", type="string", dest="enableplugins", help="enable these plugins only (e.g. plugin1,plugin2,plugin3)")

    (options, args) = optionParser.parse_args()

    if not options.listplugins and len(args) < 1:
        print "Filename is missing, exit."
        optionParser.print_help()
        return 1

    enablePluginList = []
    if options.enableplugins:
        enablePluginList = options.enableplugins.split(",")

    # load plugins
    pluginPath = "./statPlugins"
    plugins = os.listdir(pluginPath)
    plugins.sort()
    statObjList = []

    if options.listplugins:
        print "=== Stat plugin list ==="
    for plug in plugins:
        plugbase = plug[:-3]
        if not plug[-3:] == '.py' or plugbase == "__init__":
            continue
        
        try:
            pluginClass = importPlugin("statPlugins." + plugbase, plugbase)
        except:
            print "plugin %s does not install, skipping" % plug
        if options.listplugins:
            print plugbase, ":", pluginClass.__doc__
        elif plugbase in enablePluginList:
            statObjList.append(pluginClass())   # new an object from plugin class and put into list

    if options.listplugins:     # just listed all plugin and then exit
        exit(0)

    if len(enablePluginList) == 0:
        print "No plugin is specified. Exit."
        exit(0)

    # init StraceParser
    straceParser = StraceParser()

    # register plugins to parser
    for obj in statObjList:
        obj.register(straceParser)
    
    ## Go ahead and parse the file
    straceParser.startParse(args[0], options)

    ## print the result of the stat plugins
    for obj in statObjList:
        obj.printOutput()

if __name__ == "__main__":
    main()
